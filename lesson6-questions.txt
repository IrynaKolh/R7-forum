Questions for Lesson 6

1. When you enable CRUD operations on a table in the database, you need to add four things
to your Rails application.  When you generate a scaffold, all four are created.What are they?

Model: This is the Ruby class that inherits from ApplicationRecord and represents the table in the database. It defines the business logic and interacts with the database.
Controller: This handles the HTTP requests and responses. It contains actions corresponding to the CRUD operations (e.g., index, show, new, create, edit, update, destroy).
Views: These are the HTML templates that render the user interface. For each action in the controller, there is typically a corresponding view (e.g., index.html.erb, show.html.erb, new.html.erb, edit.html.erb).
Migration: This is a Ruby class that defines the changes to be made to the database schema (e.g., creating a table, adding columns). It ensures that the database structure is updated to match the model.


2. When you specify a route in config/routes.rb, you need to include certain information.  What
must be included? In addition, you may specify an additional parameter to create a variable
that describes the route.  How do you do that? What variable is created?

HTTP Verb: The HTTP method for the route (e.g., get, post, put, patch, delete).
Path: The URL path for the route.
Controller and Action: The controller and action that should handle the request.


3. What does the Rails db:migrate command do?
The rails db:migrate command runs the migrations defined in your Rails application, applying any pending changes to the database schema.


4. What file do you look at to see the current database schema?
To see the current database schema in a Rails application, you look at the db/schema.rb file.

5. What command shows the routes?
bin/rails routes

6. How can you start the Rails console? How can you do CRUD operations from the console?
bin/rails console
create -> user = User.create(name: 'John Doe', email: 'john.doe@example.com')
read all -> users = User.all
read one by id -> user = User.find(1)
update -> user = User.find(1)  +    user.update(name: 'Jane Doe')
delete -> user = User.find(1)  +    user.destroy


7. What statements are in erb files that make them different from html files?  What are the
two kinds of special statements, and how are they marked in the erb file? Where are they executed?

The Ruby code within these ERB statements is executed on the server side when the template is rendered. 
The result of this execution is plain HTML, which is then sent to the client's browser.
there are two kinds of special statements in ERB files:
Output Statements (<%= ... %>): Insert the result of Ruby code into the HTML.
Script Statements (<% ... %>): Execute Ruby code without inserting anything into the HTML.

8. Consider this statement: @forum = Forum.new().  Why is Forum capitalized?  Why is @forum not
capitalized? Why is the @ used?
Forum is capitalized because it is a class name in Ruby. 
@forum is an instance variable, and instance variables in Ruby begin with an @ symbol and are written in lowercase (snake_case). 
The @ symbol indicates that forum is an instance variable.

9. Consider these statements:

@forum = Forum.new(...) -> This statement creates a new instance of the Forum class with the attributes specified in the parentheses.
@forum =Forum.create(...) -> This statement creates a new instance of the Forum class and immediately saves it to the database. It combines new and save in one step.
@forum.save(...) -> his statement saves the current instance of @forum to the database. This method is called on an object that has already been instantiated, either by new or by loading it from the database.

What is the difference between Forum.new() and Forum.create()?  Why can't you do Forum.save(...)?
Forum.new(...): Instantiates a new Forum object but does not save it to the database.
Forum.create(...): Instantiates and saves a new Forum object to the database in one step.

new + save == create

10. In the forums controller, you have a method called show:

  def show
  end

This is an action method.  It is an action method for only one reason: There is a route
that points to it.  But there's nothing in the method!  It will do the right things
because the default behavior does what is needed.  What does the default behavior
do?  How does it know which forum to show?  Whenever you have an action method, there
is a hash called params that is passed to that method.  And, in this case, the params
hash has a value, params[:id].  What is the value for this element of the hash? How
did it get there?

Default Behavior: The show action automatically renders a view template named show and uses the params[:id] to find and display the appropriate forum.
The value of params[:id] is extracted from the URL of the request and corresponds to the ID of the forum to be shown.
It is populated based on the URL and route configuration, allowing Rails to locate the specific forum record in the database.
